import dataclasses
import os
from typing import Mapping

from pulumi import automation as auto

from buildflow import utils
from buildflow.config.pulumi_config import PulumiConfig


@dataclasses.dataclass
class PulumiWorkspace:
    pulumi_workspace_dir: str
    pulumi_config: PulumiConfig

    def get_config(self) -> PulumiConfig:
        return self.pulumi_config

    def stack_name(self) -> str:
        return self.pulumi_config.stack_name

    def project_name(self) -> str:
        return self.pulumi_config.project_name

    def workspace_id(self) -> str:
        return f"{self.pulumi_config.project_name}:{self.pulumi_config.stack_name}"

    def env_vars(self) -> Mapping[str, str]:
        return {
            "PULUMI_CONFIG_PASSPHRASE": self.pulumi_config.passphrase,
        }

    def stack_settings(self) -> auto.StackSettings:
        return auto.StackSettings(
            secrets_provider=None,
            encrypted_key=None,
            encryption_salt=None,
            # TODO: Set this using the ResourceConfig type
            config={"gcp:project": "TODO"},
        )

    def project_settings(self) -> auto.ProjectSettings:
        return auto.ProjectSettings(
            name=self.project_name,
            runtime="python",
            main=None,
            description="Pulumi Project generated by Buildflow",
            author=None,
            website=None,
            license=None,
            config=None,
            template=None,
            backend=auto.ProjectBackend(self.pulumi_config.backend_url),
        )

    def workspace_options(self) -> auto.LocalWorkspaceOptions:
        return auto.LocalWorkspaceOptions(
            # inline programs do not use work_dir
            # https://www.pulumi.com/docs/reference/pkg/python/pulumi/#automation-api-1
            work_dir=None,
            pulumi_home=self.pulumi_config.pulumi_home,
            # NOTE: we set the program as None here because we will be using an inline
            # `pulumi_program` function to dynamically create the program at runtime.
            program=None,
            env_vars=self.env_vars(),
            # TODO: add support for `secrets_provider`
            secrets_provider=None,
            project_settings=self.project_settings(),
            stack_settings={self.stack_name(): self.stack_settings()},
        )

    @classmethod
    def create(cls, pulumi_workspace_dir: str) -> "PulumiWorkspace":
        # create the default pulumi config
        pulumi_config_path = os.path.join(pulumi_workspace_dir, "config.json")
        pulumi_config = PulumiConfig.default(pulumi_workspace_dir)
        pulumi_config.dump(pulumi_config_path)
        # return the pulumi workspace
        return cls(pulumi_workspace_dir, pulumi_config)

    @classmethod
    def load(cls, pulumi_workspace_dir: str) -> "PulumiWorkspace":
        utils.assert_path_exists(pulumi_workspace_dir)
        # load the pulumi config
        pulumi_config_path = os.path.join(pulumi_workspace_dir, "config.json")
        pulumi_config = PulumiConfig.load(pulumi_config_path)
        # return the pulumi workspace
        return cls(pulumi_workspace_dir, pulumi_config)

    def save(self):
        # save the pulumi config
        pulumi_config_path = os.path.join(self.pulumi_workspace_dir, "config.json")
        self.pulumi_config.dump(pulumi_config_path)
