import dataclasses
import enum
from typing import Mapping
import os
from buildflow.core.state.state import PULUMI_STATE_DIR_LOCAL
from pulumi import automation as auto
from collections import defaultdict
from buildflow.core.processor.base import ProcessorID
from typing import Dict


class SchemaValidation(enum.Enum):
    STRICT = enum.auto()
    LOG_WARNING = enum.auto()
    NONE = enum.auto()


@dataclasses.dataclass
class PulumiResourceConfig:
    enable_destroy_protection: bool = False


@dataclasses.dataclass
class PulumiWorkspaceConfig:
    stack_name: str
    project_name: str
    passphrase: str
    backend_url: str
    pulumi_home: str
    refresh_state: bool = True
    log_level: str = "INFO"

    @classmethod
    def DEFAULT(cls):
        passphrase = ""
        if os.environ.get("PULUMI_CONFIG_PASSPHRASE") is not None:
            passphrase = os.environ.get("PULUMI_CONFIG_PASSPHRASE")

        return cls(
            stack_name="buildflow-stack",
            project_name="buildflow-app",
            passphrase=passphrase,
            backend_url=f"file://{PULUMI_STATE_DIR_LOCAL}",
            pulumi_home=os.path.join(PULUMI_STATE_DIR_LOCAL, ".pulumi"),
        )

    def env_vars(self) -> Mapping[str, str]:
        return {
            "PULUMI_CONFIG_PASSPHRASE": self.passphrase,
        }

    def stack_settings(self) -> auto.StackSettings:
        return auto.StackSettings(
            secrets_provider=None,
            encrypted_key=None,
            encryption_salt=None,
            config={"gcp:project": "TODO"},
        )

    def project_settings(self) -> auto.ProjectSettings:
        return auto.ProjectSettings(
            name=self.project_name,
            runtime="python",
            main=None,
            description="Pulumi Project generated by Buildflow",
            author=None,
            website=None,
            license=None,
            config=None,
            template=None,
            backend=auto.ProjectBackend(self.backend_url),
        )


@dataclasses.dataclass
class InfraConfig:
    # the configuration for each pulumi workspace
    pulumi_workspace_configs: Dict[
        ProcessorID, PulumiWorkspaceConfig
    ] = dataclasses.field(
        default_factory=lambda: defaultdict(PulumiWorkspaceConfig.DEFAULT)
    )
    # plan options
    schema_validation: SchemaValidation = SchemaValidation.STRICT
    # apply & destroy options (These are basically inverses of eachother)
    # TODO: make this default to True once users can provide input
    require_confirmation: bool = False
    # misc
    log_level: str = "INFO"

    @classmethod
    def DEBUG(cls):
        return cls(
            schema_validation=SchemaValidation.LOG_WARNING,
            require_confirmation=False,
            log_level="DEBUG",
        )

    @classmethod
    def DEFAULT(cls):
        return cls(
            schema_validation=SchemaValidation.LOG_WARNING,
            require_confirmation=False,
            log_level="INFO",
        )
