import warnings
from dataclasses import fields
from importlib import import_module
from typing import Type, Union, get_args, get_origin

from buildflow.io import list_all_io_primitives

warnings.simplefilter("ignore", UserWarning)


def get_io_submodule(class_name: str) -> str:
    io_primitives = list_all_io_primitives()
    class_to_submodule_map = {
        option.class_name: option.module_name for option in io_primitives
    }
    return class_to_submodule_map.get(class_name, "")


def get_class(class_name: str, submodule: str) -> Type:
    module = import_module(f"buildflow.io.{submodule}")
    return getattr(module, class_name)


def get_field_default_value(field):
    field_type = field.type
    origin_type = get_origin(field_type)
    args_type = get_args(field_type)

    if origin_type is Union and type(None) in args_type:
        inner_type = [arg for arg in args_type if arg is not type(None)][0]
        is_optional = True
    else:
        inner_type = field_type
        is_optional = False

    if inner_type is int:
        default_value = "0"
    elif inner_type is float:
        default_value = "0.0"
    elif inner_type is str:
        default_value = '"TODO"'
    else:
        default_value = '"TODO"'  # Default case for other types

    if is_optional:
        default_value += " # Optional field"

    return default_value + ","


def generate_template(
    source_class_name: str, sink_class_name: str, file_name: str = "main"
) -> str:
    source_submodule = get_io_submodule(source_class_name)
    sink_submodule = get_io_submodule(sink_class_name)

    source_class = get_class(source_class_name, source_submodule)
    sink_class = get_class(sink_class_name, sink_submodule)

    cloud_providers = set()
    if "gcp" in source_submodule or "gcp" in sink_submodule:
        cloud_providers.add("gcp")
    if "aws" in source_submodule or "aws" in sink_submodule:
        cloud_providers.add("aws")
    if "snowflake" in source_submodule or "snowflake" in sink_submodule:
        cloud_providers.add("snowflake")

    cli_steps = [
        "pip install .",
        "gcloud auth application-default login" if "gcp" in cloud_providers else None,
        "aws sso login --profile <profile_name>" if "aws" in cloud_providers else None,
        f"buildflow run {file_name}:app",
    ]

    cli_steps_str = "\n    ".join(step for step in cli_steps if step is not None)

    source_fields = "\n    ".join(
        f"{field.name}={get_field_default_value(field)}"
        for field in fields(source_class)
        if field.init
    )
    sink_fields = "\n    ".join(
        f"{field.name}={get_field_default_value(field)}"
        for field in fields(sink_class)
        if field.init
    )

    template = f"""\"\"\"Generated by BuildFlow

steps to run:
    {cli_steps_str}
\"\"\"
import dataclasses

from buildflow import Flow
from buildflow.io.{source_submodule} import {source_class_name}
from buildflow.io.{sink_submodule} import {sink_class_name}


@dataclasses.dataclass
class InputSchema:
    TODO: str


@dataclasses.dataclass
class OutputSchema:
    TODO: str


app = Flow()


source = {source_class_name}(
    {source_fields}
).options(
    # TODO: uncomment if you want Pulumi to manage the source's resource(s)
    # managed=True,
)
sink = {sink_class_name}(
    {sink_fields}
).options(
    # TODO: uncomment if you want Pulumi to manage the sink's resource(s)
    # managed=True,
)


# Attach a processor to the Flow
@app.pipeline(source=source, sink=sink)
def my_processor(event: InputSchema) -> OutputSchema:
    return OutputSchema(event.TODO)
"""

    return template
